{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.goback())\n  }, \"다이어리 수정\"), _createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.updateDiary && $options.updateDiary(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"label\", null, [_cache[7] || (_cache[7] = _createTextVNode(\" 제목: \")), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.diary.title = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.diary.title]])]), _createElementVNode(\"label\", null, [_cache[8] || (_cache[8] = _createTextVNode(\" 컨텐츠: \")), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.diary.content = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.diary.content]])]), _createCommentVNode(\" 기존 사진 또는 미리보기 표시 \"), _createElementVNode(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"p\", null, \"사진 미리보기:\", -1 /* HOISTED */)), $data.previewPhoto ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $data.previewPhoto,\n    alt: \"New Preview\",\n    style: {\n      \"max-width\": \"200px\",\n      \"border\": \"1px solid #ccc\",\n      \"margin-bottom\": \"10px\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_1)) : $data.diary.photoPath ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 1,\n    src: `http://localhost:3000/${$data.diary.photoPath}`,\n    alt: \"Current Photo\",\n    style: {\n      \"max-width\": \"200px\",\n      \"border\": \"1px solid #ccc\",\n      \"margin-bottom\": \"10px\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_2)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 커스텀 파일 선택 버튼 \"), _createElementVNode(\"div\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"file-upload\",\n    class: \"file-upload-label\"\n  }, \" 사진 변경 \", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    id: \"file-upload\",\n    type: \"file\",\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.onFileChange && $options.onFileChange(...args)),\n    class: \"file-input\"\n  }, null, 32 /* NEED_HYDRATION */)]), _cache[11] || (_cache[11] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Update\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.deleteDiary(_ctx.entry.id))\n  }, \"Delete\"), _createCommentVNode(\" 목록으로 가기 버튼 \"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.goToList && $options.goToList(...args))\n  }, \"목록으로 가기\")]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","onClick","_cache","$event","$options","goback","onSubmit","_withModifiers","args","updateDiary","_createTextVNode","type","$data","diary","title","required","content","_createCommentVNode","previewPhoto","key","src","alt","style","_hoisted_1","photoPath","_hoisted_2","for","class","id","onChange","onFileChange","_ctx","deleteDiary","entry","goToList"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/EditDiaryForm.vue"],"sourcesContent":["<template>\n  <div>\n    <h1 @click=\"goback()\">다이어리 수정</h1>\n    <form @submit.prevent=\"updateDiary\">\n      <label>\n        제목:\n        <input type=\"text\" v-model=\"diary.title\" required />\n      </label>\n      <label>\n        컨텐츠:\n        <textarea v-model=\"diary.content\" required></textarea>\n      </label>\n\n      <!-- 기존 사진 또는 미리보기 표시 -->\n      <div>\n        <p>사진 미리보기:</p>\n        <img\n          v-if=\"previewPhoto\"\n          :src=\"previewPhoto\"\n          alt=\"New Preview\"\n          style=\"max-width: 200px; border: 1px solid #ccc; margin-bottom: 10px;\"\n        />\n        <img\n          v-else-if=\"diary.photoPath\"\n          :src=\"`http://localhost:3000/${diary.photoPath}`\"\n          alt=\"Current Photo\"\n          style=\"max-width: 200px; border: 1px solid #ccc; margin-bottom: 10px;\"\n        />\n      </div>\n\n      <!-- 커스텀 파일 선택 버튼 -->\n      <div>\n        <label for=\"file-upload\" class=\"file-upload-label\">\n          사진 변경\n        </label>\n        <input id=\"file-upload\" type=\"file\" @change=\"onFileChange\" class=\"file-input\" />\n      </div>\n\n      <button type=\"submit\">Update</button>\n    </form>\n<button @click=\"deleteDiary(entry.id)\">Delete</button>\n    <!-- 목록으로 가기 버튼 -->\n    <button @click=\"goToList\">목록으로 가기</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      diary: {\n        title: '',\n        content: '',\n        photoPath: '', // 기존 사진 경로\n      },\n      newPhoto: null, // 새로 선택한 사진 파일\n      previewPhoto: null, // 새로 선택한 사진의 미리보기 URL\n    };\n  },\n  async created() {\n    const diaryId = this.$route.params.id;\n    try {\n      const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`);\n      const data = await response.json();\n      this.diary = {\n        title: data.title,\n        content: data.content,\n        photoPath: data.photo_path, // 서버에서 받은 기존 사진 경로\n      };\n    } catch (err) {\n      alert('다이어리를 불러오지 못했습니다.');\n    }\n  },\n  methods: {\n    onFileChange(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.newPhoto = file;\n\n        // FileReader를 사용해 미리보기 생성\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewPhoto = e.target.result; // 미리보기 URL 업데이트\n        };\n        reader.readAsDataURL(file); // 파일 읽기\n      }\n    },\n    async updateDiary() {\n      const diaryId = this.$route.params.id;\n\n      const formData = new FormData();\n      formData.append('title', this.diary.title);\n      formData.append('content', this.diary.content);\n\n      if (this.newPhoto) {\n        formData.append('photo', this.newPhoto); // 새로 선택한 사진 추가\n      }\n\n      try {\n        const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`, {\n          method: 'PUT',\n          body: formData,\n        });\n\n        if (response.ok) {\n          alert('다이어리를 업데이트 했어요!');\n          this.$router.push('/'); // 목록 페이지로 이동\n        } else {\n          const error = await response.json();\n          alert(`Error: ${error.message}`);\n        }\n      } catch (err) {\n        alert(`Request failed: ${err.message}`);\n      }\n    },\n    goToList() {\n      this.$router.push('/'); // 목록 페이지로 이동\n    },\n    goback() {\n      this.$router.push('/'); // 목록 페이지로 이동\n    },\n  },\n};\n</script>\n\n<style scoped>\n.file-input {\n  display: none; /* 파일 입력 필드를 숨김 */\n}\n\n.file-upload-label {\n  display: inline-block;\n  background-color: #007bff;\n  color: white;\n  padding: 8px 16px;\n  font-size: 14px;\n  border-radius: 4px;\n  cursor: pointer;\n  text-align: center;\n  margin-bottom: 10px;\n}\n.file-upload-label:hover {\n  background-color: #0056b3;\n}\n</style>"],"mappings":";mBAAA;mBAAA;;uBACEA,mBAAA,CA0CM,cAzCJC,mBAAA,CAAkC;IAA7BC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,MAAM;KAAI,SAAO,GAC7BL,mBAAA,CAoCO;IApCAM,QAAM,EAAAJ,MAAA,QAAAA,MAAA,MAHjBK,cAAA,KAAAC,IAAA,KAG2BJ,QAAA,CAAAK,WAAA,IAAAL,QAAA,CAAAK,WAAA,IAAAD,IAAA,CAAW;MAChCR,mBAAA,CAGQ,gB,0BAPdU,gBAAA,CAIa,OAEL,I,gBAAAV,mBAAA,CAAoD;IAA7CW,IAAI,EAAC,MAAM;IAN1B,uBAAAT,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMoCS,KAAA,CAAAC,KAAK,CAACC,KAAK,GAAAX,MAAA;IAAEY,QAAQ,EAAR;iDAAbH,KAAA,CAAAC,KAAK,CAACC,KAAK,E,KAEzCd,mBAAA,CAGQ,gB,0BAXdU,gBAAA,CAQa,QAEL,I,gBAAAV,mBAAA,CAAsD;IAV9D,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAU2BS,KAAA,CAAAC,KAAK,CAACG,OAAO,GAAAb,MAAA;IAAEY,QAAQ,EAAR;iDAAfH,KAAA,CAAAC,KAAK,CAACG,OAAO,E,KAGlCC,mBAAA,sBAAyB,EACzBjB,mBAAA,CAcM,c,0BAbJA,mBAAA,CAAe,WAAZ,UAAQ,sBAEHY,KAAA,CAAAM,YAAY,I,cADpBnB,mBAAA,CAKE;IArBVoB,GAAA;IAkBWC,GAAG,EAAER,KAAA,CAAAM,YAAY;IAClBG,GAAG,EAAC,aAAa;IACjBC,KAAsE,EAAtE;MAAA;MAAA;MAAA;IAAA;0BApBVC,UAAA,KAuBqBX,KAAA,CAAAC,KAAK,CAACW,SAAS,I,cAD5BzB,mBAAA,CAKE;IA3BVoB,GAAA;IAwBWC,GAAG,2BAA2BR,KAAA,CAAAC,KAAK,CAACW,SAAS;IAC9CH,GAAG,EAAC,eAAe;IACnBC,KAAsE,EAAtE;MAAA;MAAA;MAAA;IAAA;0BA1BVG,UAAA,KAAAR,mBAAA,e,GA8BMA,mBAAA,kBAAqB,EACrBjB,mBAAA,CAKM,c,4BAJJA,mBAAA,CAEQ;IAFD0B,GAAG,EAAC,aAAa;IAACC,KAAK,EAAC;KAAoB,SAEnD,sBACA3B,mBAAA,CAAgF;IAAzE4B,EAAE,EAAC,aAAa;IAACjB,IAAI,EAAC,MAAM;IAAEkB,QAAM,EAAA3B,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEJ,QAAA,CAAA0B,YAAA,IAAA1B,QAAA,CAAA0B,YAAA,IAAAtB,IAAA,CAAY;IAAEmB,KAAK,EAAC;mEAGnE3B,mBAAA,CAAqC;IAA7BW,IAAI,EAAC;EAAQ,GAAC,QAAM,qB,4BAElCX,mBAAA,CAAsD;IAA7CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAE4B,IAAA,CAAAC,WAAW,CAACD,IAAA,CAAAE,KAAK,CAACL,EAAE;KAAG,QAAM,GACzCX,mBAAA,gBAAmB,EACnBjB,mBAAA,CAA0C;IAAjCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEJ,QAAA,CAAA8B,QAAA,IAAA9B,QAAA,CAAA8B,QAAA,IAAA1B,IAAA,CAAQ;KAAE,SAAO,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}