{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      diary: {\n        title: '',\n        content: '',\n        photoPath: '' // 기존 사진 경로\n      },\n      newPhoto: null,\n      // 새로 선택한 사진 파일\n      previewPhoto: null // 새로 선택한 사진의 미리보기 URL\n    };\n  },\n  async created() {\n    const diaryId = this.$route.params.id;\n    try {\n      const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`);\n      const data = await response.json();\n      this.diary = {\n        title: data.title,\n        content: data.content,\n        photoPath: data.photo_path // 서버에서 받은 기존 사진 경로\n      };\n    } catch (err) {\n      alert('다이어리를 불러오지 못했습니다.');\n    }\n  },\n  methods: {\n    onFileChange(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.newPhoto = file;\n\n        // FileReader를 사용해 미리보기 생성\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewPhoto = e.target.result; // 미리보기 URL 업데이트\n        };\n        reader.readAsDataURL(file); // 파일 읽기\n      }\n    },\n    async updateDiary() {\n      const diaryId = this.$route.params.id;\n      const formData = new FormData();\n      formData.append('title', this.diary.title);\n      formData.append('content', this.diary.content);\n      if (this.newPhoto) {\n        formData.append('photo', this.newPhoto); // 새로 선택한 사진 추가\n      }\n      try {\n        const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`, {\n          method: 'PUT',\n          body: formData\n        });\n        if (response.ok) {\n          alert('다이어리를 업데이트 했어요!');\n          this.$router.push('/'); // 목록 페이지로 이동\n        } else {\n          const error = await response.json();\n          alert(`Error: ${error.message}`);\n        }\n      } catch (err) {\n        alert(`Request failed: ${err.message}`);\n      }\n    },\n    goToList() {\n      this.$router.push('/'); // 목록 페이지로 이동\n    }\n  }\n};","map":{"version":3,"names":["data","diary","title","content","photoPath","newPhoto","previewPhoto","created","diaryId","$route","params","id","response","fetch","json","photo_path","err","alert","methods","onFileChange","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","updateDiary","formData","FormData","append","method","body","ok","$router","push","error","message","goToList"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/EditDiaryForm.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>다이어리 수정</h1>\n    <form @submit.prevent=\"updateDiary\">\n      <label>\n        제목:\n        <input type=\"text\" v-model=\"diary.title\" required />\n      </label>\n      <label>\n        컨텐츠:\n        <textarea v-model=\"diary.content\" required></textarea>\n      </label>\n\n      <!-- 기존 사진 또는 미리보기 표시 -->\n      <div>\n        <p>사진 미리보기:</p>\n        <img\n          v-if=\"previewPhoto\"\n          :src=\"previewPhoto\"\n          alt=\"New Preview\"\n          style=\"max-width: 200px; border: 1px solid #ccc; margin-bottom: 10px;\"\n        />\n        <img\n          v-else-if=\"diary.photoPath\"\n          :src=\"`http://localhost:3000/${diary.photoPath}`\"\n          alt=\"Current Photo\"\n          style=\"max-width: 200px; border: 1px solid #ccc; margin-bottom: 10px;\"\n        />\n      </div>\n\n      <!-- 커스텀 파일 선택 버튼 -->\n      <div>\n        <label for=\"file-upload\" class=\"file-upload-label\">\n          사진 변경\n        </label>\n        <input id=\"file-upload\" type=\"file\" @change=\"onFileChange\" class=\"file-input\" />\n      </div>\n\n      <button type=\"submit\">Update</button>\n    </form>\n\n    <!-- 목록으로 가기 버튼 -->\n    <button @click=\"goToList\">목록으로 가기</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      diary: {\n        title: '',\n        content: '',\n        photoPath: '', // 기존 사진 경로\n      },\n      newPhoto: null, // 새로 선택한 사진 파일\n      previewPhoto: null, // 새로 선택한 사진의 미리보기 URL\n    };\n  },\n  async created() {\n    const diaryId = this.$route.params.id;\n    try {\n      const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`);\n      const data = await response.json();\n      this.diary = {\n        title: data.title,\n        content: data.content,\n        photoPath: data.photo_path, // 서버에서 받은 기존 사진 경로\n      };\n    } catch (err) {\n      alert('다이어리를 불러오지 못했습니다.');\n    }\n  },\n  methods: {\n    onFileChange(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.newPhoto = file;\n\n        // FileReader를 사용해 미리보기 생성\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.previewPhoto = e.target.result; // 미리보기 URL 업데이트\n        };\n        reader.readAsDataURL(file); // 파일 읽기\n      }\n    },\n    async updateDiary() {\n      const diaryId = this.$route.params.id;\n\n      const formData = new FormData();\n      formData.append('title', this.diary.title);\n      formData.append('content', this.diary.content);\n\n      if (this.newPhoto) {\n        formData.append('photo', this.newPhoto); // 새로 선택한 사진 추가\n      }\n\n      try {\n        const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`, {\n          method: 'PUT',\n          body: formData,\n        });\n\n        if (response.ok) {\n          alert('다이어리를 업데이트 했어요!');\n          this.$router.push('/'); // 목록 페이지로 이동\n        } else {\n          const error = await response.json();\n          alert(`Error: ${error.message}`);\n        }\n      } catch (err) {\n        alert(`Request failed: ${err.message}`);\n      }\n    },\n    goToList() {\n      this.$router.push('/'); // 목록 페이지로 이동\n    },\n  },\n};\n</script>\n\n<style scoped>\n.file-input {\n  display: none; /* 파일 입력 필드를 숨김 */\n}\n</style>"],"mappings":";AA+CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;QACLC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE,EAAE,CAAE;MACjB,CAAC;MACDC,QAAQ,EAAE,IAAI;MAAE;MAChBC,YAAY,EAAE,IAAI,CAAE;IACtB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMC,OAAM,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;IACrC,IAAI;MACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,mCAAmCL,OAAO,EAAE,CAAC;MAC1E,MAAMR,IAAG,GAAI,MAAMY,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,IAAI,CAACb,KAAI,GAAI;QACXC,KAAK,EAAEF,IAAI,CAACE,KAAK;QACjBC,OAAO,EAAEH,IAAI,CAACG,OAAO;QACrBC,SAAS,EAAEJ,IAAI,CAACe,UAAU,CAAE;MAC9B,CAAC;IACH,EAAE,OAAOC,GAAG,EAAE;MACZC,KAAK,CAAC,mBAAmB,CAAC;IAC5B;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,KAAK,EAAE;MAClB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QACR,IAAI,CAAChB,QAAO,GAAIgB,IAAI;;QAEpB;QACA,MAAMG,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAK,GAAKC,CAAC,IAAK;UACrB,IAAI,CAACrB,YAAW,GAAIqB,CAAC,CAACL,MAAM,CAACM,MAAM,EAAE;QACvC,CAAC;QACDJ,MAAM,CAACK,aAAa,CAACR,IAAI,CAAC,EAAE;MAC9B;IACF,CAAC;IACD,MAAMS,WAAWA,CAAA,EAAG;MAClB,MAAMtB,OAAM,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MAErC,MAAMoB,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAChC,KAAK,CAACC,KAAK,CAAC;MAC1C6B,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE,IAAI,CAAChC,KAAK,CAACE,OAAO,CAAC;MAE9C,IAAI,IAAI,CAACE,QAAQ,EAAE;QACjB0B,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC5B,QAAQ,CAAC,EAAE;MAC3C;MAEA,IAAI;QACF,MAAMO,QAAO,GAAI,MAAMC,KAAK,CAAC,mCAAmCL,OAAO,EAAE,EAAE;UACzE0B,MAAM,EAAE,KAAK;UACbC,IAAI,EAAEJ;QACR,CAAC,CAAC;QAEF,IAAInB,QAAQ,CAACwB,EAAE,EAAE;UACfnB,KAAK,CAAC,iBAAiB,CAAC;UACxB,IAAI,CAACoB,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC1B,OAAO;UACL,MAAMC,KAAI,GAAI,MAAM3B,QAAQ,CAACE,IAAI,CAAC,CAAC;UACnCG,KAAK,CAAC,UAAUsB,KAAK,CAACC,OAAO,EAAE,CAAC;QAClC;MACF,EAAE,OAAOxB,GAAG,EAAE;QACZC,KAAK,CAAC,mBAAmBD,GAAG,CAACwB,OAAO,EAAE,CAAC;MACzC;IACF,CAAC;IACDC,QAAQA,CAAA,EAAG;MACT,IAAI,CAACJ,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;IAC1B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}