{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_FullCalendar, {\n    ref: \"calendar\",\n    options: $data.calendarOptions\n  }, null, 8 /* PROPS */, [\"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_FullCalendar","ref","options","$data","calendarOptions"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/CalendarList.vue"],"sourcesContent":["<template>\n  <div>\n    <FullCalendar ref=\"calendar\" :options=\"calendarOptions\" />\n  </div>\n</template>\n\n<script>\nimport apiClient from \"../services/api.js\";\nimport FullCalendar from \"@fullcalendar/vue3\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\n\nexport default {\n  components: {\n    FullCalendar,\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin],\n        initialView: \"dayGridMonth\",\n        events: [], // Ïó¨Í∏∞ eventsÎ•º APIÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞Î°ú ÏóÖÎç∞Ïù¥Ìä∏Ìï¥Ïïº Ìï®!\n      },\n    };\n  },\n  created() {\n    this.fetchDiaries(); // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú\n  },\n  methods: {\n    formatDate(created_at) {\n      if (!created_at) {\n        console.error(\"Invalid timestamp:\", created_at);\n        return null;\n      }\n\n      const date = new Date(Number(created_at) * 1000); // Ïà´ÏûêÎ°ú Î≥ÄÌôò ÌõÑ Î∞ÄÎ¶¨Ï¥àÎ°ú Î≥ÄÌôò\n      return date.toISOString().split(\"T\")[0]; // YYYY-MM-DD ÌòïÏãù Î∞òÌôò\n    },\n    // Îã§Ïù¥Ïñ¥Î¶¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞\n    fetchDiaries() {\n      apiClient\n        .get(\"/diary\")\n        .then((response) => {\n          console.log(\"üìå Fetched diaries (raw API response):\", response.data);\n\n          const events = response.data.data.map(entry => {\n            const formattedDate = this.formatDate(entry.created_at);\n\n            console.log(\"‚úÖ Original timestamp:\", entry.created_at);\n            console.log(\"‚úÖ Formatted start date:\", formattedDate);\n\n            return {\n              title: entry.title,\n              start: formattedDate, // Î≥ÄÌôòÎêú ÎÇ†Ïßú Ï†ÅÏö©\n            };\n          });\n\n          console.log(\"üìå Events before update:\", events);\n\n          this.calendarOptions = Object.assign({}, this.calendarOptions, {\n            events: events,\n          });\n\n          console.log(\"‚úÖ Updated calendarOptions:\", this.calendarOptions);\n        })\n        .catch((error) => {\n          console.error(\"‚ùå Error fetching diaries:\", error.message);\n        });\n    }\n  }\n};\n</script>"],"mappings":";;;uBACEA,mBAAA,CAEM,cADJC,YAAA,CAA0DC,uBAAA;IAA5CC,GAAG,EAAC,UAAU;IAAEC,OAAO,EAAEC,KAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}