{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      diary: {\n        title: '',\n        content: '',\n        photoPath: '' // 기존 사진 경로\n      },\n      isPhotoChange: false,\n      // 사진 변경 활성화 여부\n      newPhoto: null // 새로 업로드된 사진 파일\n    };\n  },\n  async created() {\n    const diaryId = this.$route.params.id;\n    try {\n      const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`);\n      if (response.ok) {\n        const data = await response.json();\n        this.diary = {\n          title: data.title || '',\n          content: data.content || '',\n          photoPath: data.photo_path || ''\n        };\n      } else {\n        alert('다이어리를 불러오지 못했습니다.');\n      }\n    } catch (err) {\n      alert('서버와의 통신에 문제가 발생했습니다.');\n    }\n  },\n  methods: {\n    togglePhotoChange() {\n      this.isPhotoChange = !this.isPhotoChange; // 사진 변경 활성화/비활성화\n    },\n    onFileChange(event) {\n      this.newPhoto = event.target.files[0]; // 새로 업로드된 파일 저장\n    },\n    async updateDiary() {\n      if (!this.diary.title.trim() || !this.diary.content.trim()) {\n        alert('제목과 내용을 입력해주세요!');\n        return; // 함수 종료\n      }\n      const diaryId = this.$route.params.id;\n      const formData = new FormData();\n      formData.append('title', this.diary.title);\n      formData.append('content', this.diary.content);\n      if (this.newPhoto) {\n        formData.append('photo', this.newPhoto);\n      }\n      try {\n        const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`, {\n          method: 'PUT',\n          body: formData\n        });\n        if (response.ok) {\n          alert('다이어리를 업데이트 했어요!');\n          this.$router.push('/'); // 목록 페이지로 이동\n        } else {\n          const error = await response.json();\n          alert(`Error: ${error.message}`);\n        }\n      } catch (err) {\n        alert(`Request failed: ${err.message}`);\n      }\n    },\n    goToList() {\n      this.$router.push('/'); // 목록 페이지로 이동\n    }\n  }\n};","map":{"version":3,"names":["data","diary","title","content","photoPath","isPhotoChange","newPhoto","created","diaryId","$route","params","id","response","fetch","ok","json","photo_path","alert","err","methods","togglePhotoChange","onFileChange","event","target","files","updateDiary","trim","formData","FormData","append","method","body","$router","push","error","message","goToList"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/EditDiaryForm.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>다이어리 수정</h1>\n    <form @submit.prevent=\"updateDiary\">\n      <label>\n        제목:\n        <input type=\"text\" v-model=\"diary.title\" required />\n      </label>\n      <label>\n        컨텐츠:\n        <textarea v-model=\"diary.content\" required></textarea>\n      </label>\n\n      <!-- 기존 사진 미리보기 -->\n      <div v-if=\"diary.photoPath\">\n        <p>기존 사진:</p>\n        <img :src=\"`http://localhost:3000/${diary.photoPath}`\" alt=\"Diary Photo\" style=\"max-width: 200px;\" />\n        <button type=\"button\" @click=\"togglePhotoChange\">사진 변경하기</button>\n      </div>\n\n      <!-- 사진 변경 입력 필드 -->\n      <div v-if=\"isPhotoChange\">\n        <label>\n          새 사진 업로드:\n          <input type=\"file\" @change=\"onFileChange\" />\n        </label>\n      </div>\n\n      <button type=\"submit\">Update</button>\n    </form>\n\n    <!-- 목록으로 가기 버튼 -->\n    <button @click=\"goToList\">목록으로 가기</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      diary: {\n        title: '',\n        content: '',\n        photoPath: '', // 기존 사진 경로\n      },\n      isPhotoChange: false, // 사진 변경 활성화 여부\n      newPhoto: null, // 새로 업로드된 사진 파일\n    };\n  },\n  async created() {\n  const diaryId = this.$route.params.id;\n  try {\n    const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`);\n    if (response.ok) {\n      const data = await response.json();\n      this.diary = {\n        title: data.title || '',\n        content: data.content || '',\n        photoPath: data.photo_path || '',\n      };\n    } else {\n      alert('다이어리를 불러오지 못했습니다.');\n    }\n  } catch (err) {\n    alert('서버와의 통신에 문제가 발생했습니다.');\n  }\n  },\n  methods: {\n    togglePhotoChange() {\n      this.isPhotoChange = !this.isPhotoChange; // 사진 변경 활성화/비활성화\n    },\n    onFileChange(event) {\n      this.newPhoto = event.target.files[0]; // 새로 업로드된 파일 저장\n    },\n    async updateDiary() {\n      if (!this.diary.title.trim() || !this.diary.content.trim()) {\n        alert('제목과 내용을 입력해주세요!');\n        return; // 함수 종료\n      }\n\n      const diaryId = this.$route.params.id;\n      const formData = new FormData();\n      formData.append('title', this.diary.title);\n      formData.append('content', this.diary.content);\n\n      if (this.newPhoto) {\n        formData.append('photo', this.newPhoto);\n      }\n\n      try {\n        const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`, {\n          method: 'PUT',\n          body: formData,\n        });\n\n        if (response.ok) {\n          alert('다이어리를 업데이트 했어요!');\n          this.$router.push('/'); // 목록 페이지로 이동\n        } else {\n          const error = await response.json();\n          alert(`Error: ${error.message}`);\n        }\n      } catch (err) {\n        alert(`Request failed: ${err.message}`);\n      }\n    },\n    goToList() {\n      this.$router.push('/'); // 목록 페이지로 이동\n    },\n  },\n};\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}