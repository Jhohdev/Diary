{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport apiClient from \"../services/api.js\";\nimport CalendarList from \"./CalendarList.vue\";\nexport default {\n  name: \"DiaryList\",\n  components: {\n    CalendarList // 올바르게 등록되었는지 확인\n  },\n  data() {\n    return {\n      diaries: [],\n      // 다이어리 데이터\n      searchQuery: \"\",\n      // 검색어\n      searchFilter: \"title\",\n      // 기본 검색 필터\n      currentPage: 1,\n      // 현재 페이지\n      totalPages: 1,\n      // 총 페이지 수\n      limit: 15,\n      // 페이지당 항목 수\n      searchClicked: false // 검색 버튼을 눌렀는지 여부를 체크\n    };\n  },\n  created() {\n    this.fetchDiaries(); // 초기 데이터 로드\n  },\n  computed: {\n    // diaries 중 title이 존재하는 항목이 하나라도 있으면 true 반환\n    hasTitles() {\n      return this.diaries.some(entry => entry.title);\n    }\n  },\n  methods: {\n    // 다이어리 데이터 가져오기\n    fetchDiaries() {\n      const params = {\n        search: this.searchQuery,\n        filter: this.searchFilter,\n        // 검색 필터 추가\n        page: this.currentPage,\n        limit: this.limit\n      };\n      apiClient.get(\"/diary\", {\n        params\n      }).then(response => {\n        console.log(\"Fetched diaries:\", response.data);\n        this.diaries = response.data.data; // 현재 페이지 데이터\n        this.totalPages = Math.ceil(response.data.total / this.limit); // 총 페이지 계산\n      }).catch(error => {\n        console.error(\"Error fetching diaries:\", error.message);\n      });\n    },\n    // 검색 실행\n    searchDiaries() {\n      this.searchClicked = true; // 검색 버튼을 눌렀음을 표시\n      this.currentPage = 1; // 검색 시 첫 페이지로 이동\n      this.fetchDiaries();\n    },\n    // 페이지 변경\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n        this.fetchDiaries();\n      }\n    }\n  }\n};","map":{"version":3,"names":["apiClient","CalendarList","name","components","data","diaries","searchQuery","searchFilter","currentPage","totalPages","limit","searchClicked","created","fetchDiaries","computed","hasTitles","some","entry","title","methods","params","search","filter","page","get","then","response","console","log","Math","ceil","total","catch","error","message","searchDiaries","changePage"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/DiaryList.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Diary List</h2>\n\n    <!-- 검색 UI -->\n    <div class=\"search-bar\">\n      <!-- 검색 필터 -->\n      <select v-model=\"searchFilter\">\n        <option value=\"title\">Title</option>\n        <option value=\"content\">Content</option>\n      </select>\n\n      <!-- 검색어 입력 -->\n      <input\n        type=\"text\"\n        v-model=\"searchQuery\"\n        placeholder=\"Search diaries\"\n      />\n      <button @click=\"searchDiaries\">Search</button>\n\n    </div>\n\n    <!-- 다이어리 목록 -->\n   <!-- diaries 중 title이 존재하는 경우 리스트를 보여주고, 없으면 CalendarList를 보여줌 -->\n\n   <CalendarList v-if=\"hasTitles\"/>\n   <ul v-else >\n      <li v-for=\"entry in diaries\" :key=\"entry.id\">\n        <strong>\n          <router-link :to=\"`/edit/${entry.id}`\">{{ entry.title }}</router-link>\n        </strong>\n        <br />\n        {{ entry.content }}<br />\n        <em>{{ new Date(entry.created_at).toLocaleString() }}</em>\n      </li>\n    </ul>\n\n    \n\n    <!-- 페이지네이션 -->\n    <div class=\"pagination\">\n      <button\n        v-for=\"page in totalPages\"\n        :key=\"page\"\n        @click=\"changePage(page)\"\n        :class=\"{ active: page === currentPage }\"\n      >\n        {{ page }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport apiClient from \"../services/api.js\";\nimport CalendarList from \"./CalendarList.vue\";\n\nexport default {\n  name: \"DiaryList\",\n  components: {\n    CalendarList, // 올바르게 등록되었는지 확인\n  },\n  data() {\n    return {\n      diaries: [], // 다이어리 데이터\n      searchQuery: \"\", // 검색어\n      searchFilter: \"title\", // 기본 검색 필터\n      currentPage: 1, // 현재 페이지\n      totalPages: 1, // 총 페이지 수\n      limit: 15, // 페이지당 항목 수\n      searchClicked: false, // 검색 버튼을 눌렀는지 여부를 체크\n    };\n  },\n  created() {\n    this.fetchDiaries(); // 초기 데이터 로드\n  },\n  computed: {\n    // diaries 중 title이 존재하는 항목이 하나라도 있으면 true 반환\n    hasTitles() {\n      return this.diaries.some(entry => entry.title);\n    }\n  },\n  methods: {\n    // 다이어리 데이터 가져오기\n    fetchDiaries() {\n      const params = {\n        search: this.searchQuery,\n        filter: this.searchFilter, // 검색 필터 추가\n        page: this.currentPage,\n        limit: this.limit,\n      };\n\n      apiClient\n        .get(\"/diary\", { params })\n        .then((response) => {\n          console.log(\"Fetched diaries:\", response.data);\n          this.diaries = response.data.data; // 현재 페이지 데이터\n          this.totalPages = Math.ceil(response.data.total / this.limit); // 총 페이지 계산\n        })\n        .catch((error) => {\n          console.error(\"Error fetching diaries:\", error.message);\n        });\n    },\n    // 검색 실행\n    searchDiaries() {\n      this.searchClicked = true; // 검색 버튼을 눌렀음을 표시\n      this.currentPage = 1; // 검색 시 첫 페이지로 이동\n      this.fetchDiaries();\n    },\n    // 페이지 변경\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n        this.fetchDiaries();\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.search-bar {\n  margin-bottom: 20px;\n}\n.search-bar input {\n  padding: 8px;\n  width: 300px;\n  margin-right: 10px;\n}\n.search-bar select {\n  padding: 8px;\n  margin-right: 10px;\n}\n.search-bar button {\n  padding: 8px 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n.search-bar button:hover {\n  background-color: #0056b3;\n}\n.pagination {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n.pagination button {\n  padding: 8px 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n.pagination button.active {\n  background-color: #0056b3;\n  font-weight: bold;\n}\n.pagination button:hover {\n  background-color: #0056b3;\n}\n</style>"],"mappings":";;AAsDA,OAAOA,SAAQ,MAAO,oBAAoB;AAC1C,OAAOC,YAAW,MAAO,oBAAoB;AAE7C,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAE;IACVF,YAAY,CAAE;EAChB,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MAAE;MACbC,WAAW,EAAE,EAAE;MAAE;MACjBC,YAAY,EAAE,OAAO;MAAE;MACvBC,WAAW,EAAE,CAAC;MAAE;MAChBC,UAAU,EAAE,CAAC;MAAE;MACfC,KAAK,EAAE,EAAE;MAAE;MACXC,aAAa,EAAE,KAAK,CAAE;IACxB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE;EACvB,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACV,OAAO,CAACW,IAAI,CAACC,KAAI,IAAKA,KAAK,CAACC,KAAK,CAAC;IAChD;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAN,YAAYA,CAAA,EAAG;MACb,MAAMO,MAAK,GAAI;QACbC,MAAM,EAAE,IAAI,CAACf,WAAW;QACxBgB,MAAM,EAAE,IAAI,CAACf,YAAY;QAAE;QAC3BgB,IAAI,EAAE,IAAI,CAACf,WAAW;QACtBE,KAAK,EAAE,IAAI,CAACA;MACd,CAAC;MAEDV,SAAQ,CACLwB,GAAG,CAAC,QAAQ,EAAE;QAAEJ;MAAO,CAAC,EACxBK,IAAI,CAAEC,QAAQ,IAAK;QAClBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAACtB,IAAI,CAAC;QAC9C,IAAI,CAACC,OAAM,GAAIqB,QAAQ,CAACtB,IAAI,CAACA,IAAI,EAAE;QACnC,IAAI,CAACK,UAAS,GAAIoB,IAAI,CAACC,IAAI,CAACJ,QAAQ,CAACtB,IAAI,CAAC2B,KAAI,GAAI,IAAI,CAACrB,KAAK,CAAC,EAAE;MACjE,CAAC,EACAsB,KAAK,CAAEC,KAAK,IAAK;QAChBN,OAAO,CAACM,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;MACzD,CAAC,CAAC;IACN,CAAC;IACD;IACAC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACxB,aAAY,GAAI,IAAI,EAAE;MAC3B,IAAI,CAACH,WAAU,GAAI,CAAC,EAAE;MACtB,IAAI,CAACK,YAAY,CAAC,CAAC;IACrB,CAAC;IACD;IACAuB,UAAUA,CAACb,IAAI,EAAE;MACf,IAAIA,IAAG,IAAK,KAAKA,IAAG,IAAK,IAAI,CAACd,UAAU,EAAE;QACxC,IAAI,CAACD,WAAU,GAAIe,IAAI;QACvB,IAAI,CAACV,YAAY,CAAC,CAAC;MACrB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}