{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_FullCalendar, {\n    ref: \"calendar\",\n    options: $data.calendarOptions\n  }, null, 8 /* PROPS */, [\"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_FullCalendar","ref","options","$data","calendarOptions"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/CalendarList.vue"],"sourcesContent":["<template>\n  <div>\n    <FullCalendar ref=\"calendar\" :options=\"calendarOptions\" />\n  </div>\n</template>\n\n<script>\nimport apiClient from \"../services/api.js\";\nimport FullCalendar from \"@fullcalendar/vue3\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\n\nexport default {\n  components: {\n    FullCalendar,\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin],\n        initialView: \"dayGridMonth\",\n        events: [],\n      },\n    };\n  },\n  created() {\n    this.fetchDiaries(); // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú\n  },\n  methods: {\n    // created_atÏùÑ YYYY-MM-DD ÌòïÏãùÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò\n    formatDate(created_at) {\n      if (!created_at) {\n        console.error(\"‚ùå Invalid created_at:\", created_at);\n        return null;\n      }\n\n      // created_atÏù¥ Ïà´ÏûêÏù∏ Í≤ΩÏö∞ (UNIX timestamp) ‚Üí Î≥ÄÌôò\n      if (!isNaN(created_at)) {\n        const date = new Date(Number(created_at) * 1000);\n        return date.toISOString().split(\"T\")[0]; // YYYY-MM-DD ÌòïÏãù Î∞òÌôò\n      }\n\n      // created_atÏù¥ Î¨∏ÏûêÏó¥Ïù∏ Í≤ΩÏö∞ (ISO ÌòïÏãù) ‚Üí Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©\n      return created_at.split(\"T\")[0];\n    },\n\n    // Îã§Ïù¥Ïñ¥Î¶¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞\n    fetchDiaries() {\n      apiClient\n        .get(\"/diary\")\n        .then((response) => {\n          console.log(\"üìå Raw API Response:\", response.data); // API ÏùëÎãµ Ï†ÑÏ≤¥ ÌôïÏù∏\n\n          if (!response.data || !Array.isArray(response.data.data)) {\n            console.error(\"‚ùå API ÏùëÎãµÏù¥ Î∞∞Ïó¥Ïù¥ ÏïÑÎãôÎãàÎã§!\", response.data);\n            return;\n          }\n\n          console.log(\"üìå Îç∞Ïù¥ÌÑ∞ Í∞úÏàò:\", response.data.data.length); // Îç∞Ïù¥ÌÑ∞ Í∞úÏàò ÌôïÏù∏\n\n          const events = response.data.data.map(entry => {\n            console.log(\"üîç Entry:\", entry); // Í∞úÎ≥Ñ Ìï≠Î™© Î°úÍ∑∏\n            console.log(\"üìÜ Entry created_at:\", entry.created_at); // created_at ÌôïÏù∏\n\n            if (!entry.created_at) {\n              console.error(\"‚ùå ÏûòÎ™ªÎêú created_at Í∞í:\", entry);\n              return null;\n            }\n\n            return {\n              title: entry.title,\n              start: this.formatDate(entry.created_at),\n            };\n          }).filter(event => event !== null); // Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ìï≠Î™© Ï†úÍ±∞\n\n          console.log(\"‚úÖ Events before update:\", events);\n\n          // FullCalendarÍ∞Ä Î≥ÄÍ≤ΩÏùÑ Í∞êÏßÄÌïòÎèÑÎ°ù ÏÑ§Ï†ï\n          this.calendarOptions = { ...this.calendarOptions, events };\n\n          // FullCalendar Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ\n          this.$nextTick(() => {\n            if (this.$refs.calendar) {\n              this.$refs.calendar.getApi().refetchEvents();\n            }\n          });\n\n          console.log(\"‚úÖ Updated calendarOptions:\", this.calendarOptions);\n        })\n        .catch((error) => {\n          console.error(\"‚ùå Error fetching diaries:\", error.message);\n        });\n    }\n  }\n};\n</script>"],"mappings":";;;uBACEA,mBAAA,CAEM,cADJC,YAAA,CAA0DC,uBAAA;IAA5CC,GAAG,EAAC,UAAU;IAAEC,OAAO,EAAEC,KAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}