{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"h1\", null, \"다이어리 수정\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.updateDiary && $options.updateDiary(...args), [\"prevent\"]))\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", null, [_createTextVNode(\" 제목: \"), _createCommentVNode(\" <input type=\\\"text\\\" v-model=\\\"diary.title\\\" required /> \"), _createElementVNode(\"input\", {\n    type: \"text\",\n    \"{{\": \"\",\n    \"diary.title\": \"\",\n    \"}}\": \"\",\n    required: \"\"\n  })], -1 /* HOISTED */)), _createElementVNode(\"label\", null, [_cache[5] || (_cache[5] = _createTextVNode(\" 컨텐츠: \")), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.diary.content = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.diary.content]])]), _createCommentVNode(\" 기존 사진 미리보기 \"), $data.diary.photoPath ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"p\", null, \"기존 사진:\", -1 /* HOISTED */)), _createElementVNode(\"img\", {\n    src: `http://localhost:3000/${$data.diary.photoPath}`,\n    alt: \"Diary Photo\",\n    style: {\n      \"max-width\": \"200px\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_2), _createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.togglePhotoChange && $options.togglePhotoChange(...args))\n  }, \"사진 변경하기\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 사진 변경 입력 필드 \"), $data.isPhotoChange ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"label\", null, [_cache[7] || (_cache[7] = _createTextVNode(\" 새 사진 업로드: \")), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.onFileChange && $options.onFileChange(...args))\n  }, null, 32 /* NEED_HYDRATION */)])])) : _createCommentVNode(\"v-if\", true), _cache[9] || (_cache[9] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Update\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createCommentVNode(\" 목록으로 가기 버튼 \"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.goToList && $options.goToList(...args))\n  }, \"목록으로 가기\")]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","updateDiary","_createTextVNode","_createCommentVNode","type","required","$event","$data","diary","content","photoPath","_hoisted_1","src","alt","style","_hoisted_2","onClick","togglePhotoChange","isPhotoChange","_hoisted_3","onChange","onFileChange","goToList"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/EditDiaryForm.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>다이어리 수정</h1>\n    <form @submit.prevent=\"updateDiary\">\n      <label>\n        제목:\n        <!-- <input type=\"text\" v-model=\"diary.title\" required /> -->\n        <input type=\"text\" {{ diary.title }} required />\n      </label>\n      <label>\n        컨텐츠:\n        <textarea v-model=\"diary.content\" required></textarea>\n      </label>\n\n      <!-- 기존 사진 미리보기 -->\n      <div v-if=\"diary.photoPath\">\n        <p>기존 사진:</p>\n        <img :src=\"`http://localhost:3000/${diary.photoPath}`\" alt=\"Diary Photo\" style=\"max-width: 200px;\" />\n        <button type=\"button\" @click=\"togglePhotoChange\">사진 변경하기</button>\n      </div>\n\n      <!-- 사진 변경 입력 필드 -->\n      <div v-if=\"isPhotoChange\">\n        <label>\n          새 사진 업로드:\n          <input type=\"file\" @change=\"onFileChange\" />\n        </label>\n      </div>\n\n      <button type=\"submit\">Update</button>\n    </form>\n\n    <!-- 목록으로 가기 버튼 -->\n    <button @click=\"goToList\">목록으로 가기</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      diary: {\n        title: '',\n        content: '',\n        photoPath: '', // 기존 사진 경로\n      },\n      isPhotoChange: false, // 사진 변경 활성화 여부\n      newPhoto: null, // 새로 업로드된 사진 파일\n    };\n  },\n  async created() {\n    const diaryId = this.$route.params.id;\n    try {\n      const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`);\n      if (response.ok) {\n        const data = await response.json();\n        this.diary = {\n          title: data.title || '',\n          content: data.content || '',\n          photoPath: data.photo_path || '',\n        };\n      } else {\n        alert('다이어리를 불러오지 못했습니다.');\n      }\n    } catch (err) {\n      alert('서버와의 통신에 문제가 발생했습니다.');\n    }\n  },\n  methods: {\n    togglePhotoChange() {\n      this.isPhotoChange = !this.isPhotoChange; // 사진 변경 활성화/비활성화\n    },\n    onFileChange(event) {\n      this.newPhoto = event.target.files[0]; // 새로 업로드된 파일 저장\n    },\n    async updateDiary() {\n      if (!this.diary.title.trim() || !this.diary.content.trim()) {\n        alert('제목과 내용을 입력해주세요!');\n        return; // 함수 종료\n      }\n\n      const diaryId = this.$route.params.id;\n      const formData = new FormData();\n      formData.append('title', this.diary.title);\n      formData.append('content', this.diary.content);\n\n      if (this.newPhoto) {\n        formData.append('photo', this.newPhoto);\n      }\n\n      try {\n        const response = await fetch(`http://localhost:3000/api/diary/${diaryId}`, {\n          method: 'PUT',\n          body: formData,\n        });\n\n        if (response.ok) {\n          alert('다이어리를 업데이트 했어요!');\n          this.$router.push('/'); // 목록 페이지로 이동\n        } else {\n          const error = await response.json();\n          alert(`Error: ${error.message}`);\n        }\n      } catch (err) {\n        alert(`Request failed: ${err.message}`);\n      }\n    },\n    goToList() {\n      this.$router.push('/'); // 목록 페이지로 이동\n    },\n  },\n};\n</script>"],"mappings":";;EAAAA,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAiCM,c,4BAhCJC,mBAAA,CAAgB,YAAZ,SAAO,sBACXA,mBAAA,CA2BO;IA3BAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;gCAChCJ,mBAAA,CAIQ,gBARdO,gBAAA,CAIa,OAEL,GAAAC,mBAAA,8DAA6D,EAC7DR,mBAAA,CAAgD;IAAzCS,IAAI,EAAC,MAAM;IAAC,IAAE,EAAF,EAAE;IAAC,aAAW,EAAX,EAAW;IAAC,IAAE,EAAF,EAAE;IAACC,QAAQ,EAAR;2BAEvCV,mBAAA,CAGQ,gB,0BAZdO,gBAAA,CASa,QAEL,I,gBAAAP,mBAAA,CAAsD;IAX9D,uBAAAE,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAW2BC,KAAA,CAAAC,KAAK,CAACC,OAAO,GAAAH,MAAA;IAAED,QAAQ,EAAR;iDAAfE,KAAA,CAAAC,KAAK,CAACC,OAAO,E,KAGlCN,mBAAA,gBAAmB,EACRI,KAAA,CAAAC,KAAK,CAACE,SAAS,I,cAA1BhB,mBAAA,CAIM,OAnBZiB,UAAA,G,0BAgBQhB,mBAAA,CAAa,WAAV,QAAM,sBACTA,mBAAA,CAAqG;IAA/FiB,GAAG,2BAA2BL,KAAA,CAAAC,KAAK,CAACE,SAAS;IAAIG,GAAG,EAAC,aAAa;IAACC,KAAyB,EAAzB;MAAA;IAAA;0BAjBjFC,UAAA,GAkBQpB,mBAAA,CAAiE;IAAzDS,IAAI,EAAC,QAAQ;IAAEY,OAAK,EAAAnB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAiB,iBAAA,IAAAjB,QAAA,CAAAiB,iBAAA,IAAAlB,IAAA,CAAiB;KAAE,SAAO,E,KAlBhEI,mBAAA,gBAqBMA,mBAAA,iBAAoB,EACTI,KAAA,CAAAW,aAAa,I,cAAxBxB,mBAAA,CAKM,OA3BZyB,UAAA,GAuBQxB,mBAAA,CAGQ,gB,0BA1BhBO,gBAAA,CAuBe,aAEL,IAAAP,mBAAA,CAA4C;IAArCS,IAAI,EAAC,MAAM;IAAEgB,QAAM,EAAAvB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAqB,YAAA,IAAArB,QAAA,CAAAqB,YAAA,IAAAtB,IAAA,CAAY;2CAzBlDI,mBAAA,gB,0BA6BMR,mBAAA,CAAqC;IAA7BS,IAAI,EAAC;EAAQ,GAAC,QAAM,qB,4BAG9BD,mBAAA,gBAAmB,EACnBR,mBAAA,CAA0C;IAAjCqB,OAAK,EAAAnB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAsB,QAAA,IAAAtB,QAAA,CAAAsB,QAAA,IAAAvB,IAAA,CAAQ;KAAE,SAAO,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}