{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_FullCalendar, {\n    ref: \"calendar\",\n    options: $data.calendarOptions\n  }, null, 8 /* PROPS */, [\"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_FullCalendar","ref","options","$data","calendarOptions"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/CalendarList.vue"],"sourcesContent":["<template>\n  <div>\n    <FullCalendar ref=\"calendar\" :options=\"calendarOptions\" />\n  </div>\n</template>\n\n<script>\nimport apiClient from \"../services/api.js\";\nimport FullCalendar from \"@fullcalendar/vue3\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\"; // 📌 날짜 클릭 이벤트를 사용하려면 필요!\n\nexport default {\n  components: {\n    FullCalendar,\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, interactionPlugin], // 📌 FullCalendar 플러그인 추가\n        initialView: \"dayGridMonth\",\n        timeZone: \"local\", // ✅ FullCalendar가 로컬(KST) 시간 기준으로 표시하도록 설정\n        displayEventTime: false, // ✅ 시간 표시를 제거하여 날짜 오류 방지\n        events: [],\n        eventClick: this.handleEventClick, // 일정 클릭 이벤트\n        dateClick: this.handleDateClick, // 📌 날짜 클릭 이벤트\n      },\n    };\n  },\n  created() {\n    this.fetchDiaries();\n  },\n  methods: {\n    formatDate(created_at) {\n      if (!created_at) return null;\n\n      let date;\n\n      // ✅ `created_at`이 UNIX timestamp(초 단위)일 경우 처리\n      if (!isNaN(created_at) && typeof created_at !== \"string\") {\n        date = new Date(Number(created_at) * 1000);\n      } else {\n        date = new Date(created_at);\n      }\n\n      // ✅ `UTC → KST` 변환\n      date.setMinutes(date.getMinutes() + date.getTimezoneOffset());\n\n      return date.toISOString().split(\"T\")[0]; // \"YYYY-MM-DD\" 반환\n    },\n    fetchDiaries() {\n      apiClient\n        .get(\"/diary\")\n        .then((response) => {\n          if (!response.data || !Array.isArray(response.data.data)) return;\n\n          const events = response.data.data.map(entry => ({\n            id: entry.id, // 상세페이지 이동을 위해 ID 포함\n            title: entry.title,\n            start: this.formatDate(entry.created_at), // ✅ KST로 변환된 날짜 사용\n            Prototype: entry.Prototype,\n          }));\n\n          this.calendarOptions = {\n            ...this.calendarOptions,\n            events: events,\n            timeZone: \"local\", // ✅ FullCalendar가 UTC 대신 KST 기준으로 표시\n            displayEventTime: false, // ✅ 시간 표시 비활성화\n          };\n          this.$nextTick(() => {\n            if (this.$refs.calendar) {\n              this.$refs.calendar.getApi().refetchEvents();\n            }\n          });\n        })\n        .catch(error => console.error(\"Error fetching diaries:\", error.message));\n    },\n    // ✅ 일정 클릭 시 상세 페이지로 이동\n    handleEventClick(info) {\n      console.log(\"Clicked event:\", info.event);\n      const eventId = info.event.id;\n      if (eventId) {\n        this.$router.push(`/edit/${eventId}`);\n      }\n    },\n    // ✅ 날짜 클릭 시 동작\n    handleDateClick(info) {\n      alert(`📅 선택한 날짜: ${info.dateStr}`);\n      console.log(\"Clicked Date Info:\", info);\n      \n      // 선택한 날짜로 다이어리 작성 페이지 이동\n      this.$router.push(`/create?date=${info.dateStr}`);\n    },\n  }\n};\n</script>"],"mappings":";;;uBACEA,mBAAA,CAEM,cADJC,YAAA,CAA0DC,uBAAA;IAA5CC,GAAG,EAAC,UAAU;IAAEC,OAAO,EAAEC,KAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}