{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"search-bar\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 3,\n  class: \"pagination\"\n};\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_CalendarList = _resolveComponent(\"CalendarList\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Diary List\", -1 /* HOISTED */)), _createCommentVNode(\" 검색 UI \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.checkFiltter && $options.checkFiltter(...args))\n  }, \"검색하기\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.checkListFiltter && $options.checkListFiltter(...args))\n  }, \"리스트보기\"), $data.chkFiltter == true ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 검색 필터 \"), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.searchFilter = $event)\n  }, _cache[5] || (_cache[5] = [_createElementVNode(\"option\", {\n    value: \"title\"\n  }, \"Title\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"content\"\n  }, \"Content\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.searchFilter]]), _createCommentVNode(\" 검색어 입력 \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.searchQuery = $event),\n    placeholder: \"Search diaries\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.searchDiaries && $options.searchDiaries(...args))\n  }, \"Search\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 검색이 실행되었고, 결과가 있는 경우에만 리스트 표시 \"), ($data.searchClicked || $data.chkListFiltter) && $data.diaries.length > 0 ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.diaries, entry => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: entry.id\n    }, [_createElementVNode(\"strong\", null, [_createVNode(_component_router_link, {\n      to: `/edit/${entry.id}`\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(entry.title), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"])]), _cache[6] || (_cache[6] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(entry.content), 1 /* TEXT */), _cache[7] || (_cache[7] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */)), _createElementVNode(\"em\", null, _toDisplayString(new Date(entry.created_at).toLocaleString()), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 검색 결과가 없거나 검색을 실행하지 않은 경우 캘린더 표시 \"), _createVNode(_component_CalendarList)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 페이지네이션 (검색이 실행되었고, 결과가 있는 경우에만 표시) \"), ($data.searchClicked || $data.chkListFiltter) && $data.diaries.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.totalPages, page => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: page,\n      onClick: $event => $options.changePage(page),\n      class: _normalizeClass({\n        active: page === $data.currentPage\n      })\n    }, _toDisplayString(page), 11 /* TEXT, CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","_createCommentVNode","onClick","_cache","args","$options","checkFiltter","checkListFiltter","$data","chkFiltter","_hoisted_1","$event","searchFilter","value","type","searchQuery","placeholder","searchDiaries","searchClicked","chkListFiltter","diaries","length","_hoisted_2","_Fragment","_renderList","entry","id","_createVNode","_component_router_link","to","default","_withCtx","_createTextVNode","_toDisplayString","title","_","content","Date","created_at","toLocaleString","_component_CalendarList","_hoisted_3","totalPages","page","changePage","_normalizeClass","active","currentPage","_hoisted_4"],"sources":["/Users/ojaehyeon/Diary/diary-app-frontend/src/components/DiaryList.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Diary List</h2>\n\n    <!-- 검색 UI -->\n    <button @click=\"checkFiltter\">검색하기</button>\n    <button @click=\"checkListFiltter\">리스트보기</button>\n      <div class=\"search-bar\" v-if=\"chkFiltter == true\">\n        <!-- 검색 필터 -->\n        <select v-model=\"searchFilter\">\n          <option value=\"title\">Title</option>\n          <option value=\"content\">Content</option>\n        </select>\n\n        <!-- 검색어 입력 -->\n        <input\n          type=\"text\"\n          v-model=\"searchQuery\"\n          placeholder=\"Search diaries\"\n        />\n        <button @click=\"searchDiaries\">Search</button>\n      </div>\n\n    <!-- 검색이 실행되었고, 결과가 있는 경우에만 리스트 표시 -->\n    <ul v-if=\"(searchClicked || chkListFiltter) && diaries.length > 0\">\n      <li v-for=\"entry in diaries\" :key=\"entry.id\">\n        <strong>\n          <router-link :to=\"`/edit/${entry.id}`\">{{ entry.title }}</router-link>\n        </strong>\n        <br />\n        {{ entry.content }}<br />\n        <em>{{ new Date(entry.created_at).toLocaleString() }}</em>\n      </li>\n    </ul>\n\n    <!-- 검색 결과가 없거나 검색을 실행하지 않은 경우 캘린더 표시 -->\n    <CalendarList v-else />\n\n    <!-- 페이지네이션 (검색이 실행되었고, 결과가 있는 경우에만 표시) -->\n    <div class=\"pagination\" v-if=\"(searchClicked || chkListFiltter) && diaries.length > 0\">\n      <button\n        v-for=\"page in totalPages\"\n        :key=\"page\"\n        @click=\"changePage(page)\"\n        :class=\"{ active: page === currentPage }\"\n      >\n        {{ page }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport apiClient from \"../services/api.js\";\nimport CalendarList from \"./CalendarList.vue\";\n\nexport default {\n  name: \"DiaryList\",\n  components: {\n    CalendarList,\n  },\n  data() {\n    return {\n      diaries: [], // 다이어리 데이터\n      searchQuery: \"\", // 검색어\n      searchFilter: \"title\", // 기본 검색 필터\n      currentPage: 1, // 현재 페이지\n      totalPages: 1, // 총 페이지 수\n      limit: 15, // 페이지당 항목 수\n      searchClicked: false, // 검색 버튼을 눌렀는지 여부 체크\n      chkFiltter: false, // 검색 버튼을 눌렀는지 여부 체크\n      chkListFiltter: false, // 검색 버튼을 눌렀는지 여부 체크\n    };\n  },\n  methods: {\n    // 다이어리 데이터 가져오기\n    fetchDiaries() {\n      const params = {\n        search: this.searchQuery,\n        filter: this.searchFilter, // 검색 필터 추가\n        page: this.currentPage,\n        limit: this.limit,\n      };\n\n      apiClient\n        .get(\"/diary\", { params })\n        .then((response) => {\n          console.log(\"Fetched diaries:\", response.data);\n          this.diaries = response.data.data; // 현재 페이지 데이터\n          this.totalPages = Math.ceil(response.data.total / this.limit); // 총 페이지 계산\n        })\n        .catch((error) => {\n          console.error(\"Error fetching diaries:\", error.message);\n        });\n    },\n    // 검색 실행\n    searchDiaries() {\n      this.searchClicked = true; // 검색 버튼을 눌렀음을 표시\n      this.currentPage = 1; // 검색 시 첫 페이지로 이동\n      this.fetchDiaries();\n    },\n    checkFiltter() {\n      this.chkFiltter = true; // 검색하기 버튼을 눌렀음을 표시\n    },\n    checkListFiltter() {\n      this.chkListFiltter = true; // 검색하기 버튼을 눌렀음을 표시\n      this.fetchDiaries(); // 리스트 보기 버튼을 누르면 데이터 로드\n\n    },\n    // 페이지 변경\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n        this.fetchDiaries();\n      }\n    },\n  },\n};\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}